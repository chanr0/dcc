# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:
  - lint
  - build
  - deploy

lint_helm:
  stage: lint
  image: matthiasgabathuler/my-runner:ubuntu-20.04
  tags:
    - isg-test
  script:
    - IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - >-
      helm lint ${CI_PROJECT_DIR}/helm
      --set image.name=${IMAGE_NAME}
      --set image.tag=${CI_COMMIT_REF_NAME}
      --set build.job_id=${CI_JOB_ID}
      --set build.commit=${CI_COMMIT_SHA}

build_backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - isg-test
  variables:
    IMAGE_NAME: $ci_registry/$CI_PROJECT_PATH-backend
  script:
    - IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - mkdir -p /kaniko/.docker
    # - |-
    #    KANIKOPROXYBUILDARGS=""
    #    KANIKOCFG="\"auths\":{\"${ci_registry}\":{\"auth\":\"$(printf "%s:%s" "${ci_registry_user}" "${ci_registry_password}" | base64 | tr -d '\n')\"}}"
    #    KANIKOCFG="{ ${KANIKOCFG} }"
    #    echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend-project"
      --dockerfile "${CI_PROJECT_DIR}/backend-project/Dockerfile"
      --destination "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
      --destination "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
      --destination "${IMAGE_NAME}:latest"
  only:
    refs:
      - ci-cd-pipeline
      - /^release.*$/
    changes:
      - backend-project/**/*

build_frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - isg-test
  variables:
    IMAGE_NAME: $ci_registry/$CI_PROJECT_PATH-frontend
  script:
    - IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    # - |-
    #    KANIKOPROXYBUILDARGS=""
    #    KANIKOCFG="\"auths\":{\"${ci_registry}\":{\"auth\":\"$(printf "%s:%s" "${ci_registry_user}" "${ci_registry_password}" | base64 | tr -d '\n')\"}}"
    #    KANIKOCFG="{ ${KANIKOCFG} }"
    #    echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - sed -i "s/##BACKEND_URI##/http:\/\/be.$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]').course-xai-iml22.isginf.ch/g" react-frontend/src/backend/BackendQueryEngine.tsx
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/react-frontend"
      --dockerfile "${CI_PROJECT_DIR}/react-frontend/Dockerfile"
      --destination "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
      --destination "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
      --destination "${IMAGE_NAME}:latest"
  only:
    refs:
      - ci-cd-pipeline
      - /^release.*$/
    changes:
      - react-frontend/**/*

deploy_app:
  stage: deploy
  image: matthiasgabathuler/my-runner:ubuntu-20.04
  tags:
  - isg-test
  variables:
    IMAGE_NAME: $CI_PROJECT_PATH
  script:
  - IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - >-
    helm --namespace $k8s_namespace
    --kube-context $k8s_context
    upgrade ${CI_PROJECT_NAME} ${CI_PROJECT_DIR}/helm
    --install
    --history-max 10
    --set image.host=${ci_registry}
    --set image.name=${IMAGE_NAME}
    --set image.tag=${CI_COMMIT_REF_NAME}
    --set build.job_id=${CI_JOB_ID}
    --set build.commit=${CI_COMMIT_SHA}
  only:
    - ci-cd-pipeline
    - /^release.*$/
